Samantha Rack
CSE 20211
Lab 8 Report

When the program synth.c is run by the user without a music file to read in, the user is asked to input valid instructions for the music they would like to produce.  The user also has the option to read in a file of characters that are accepted by the program as their input.  If all data is valid, the program completes, and the user can type play music.wav to listen to the music produced by their instructions.  If there is an invalid character inputed by the user, an error message is displayed, telling the user that the invalid character was not used to write information into wav file.

In the main function, synth.c creates an array to store the information for each note (waveform), which has enough memory space to hold all of the needed information for a whole note (the longest one implemented by the program).  It then uses the library wavfile.h to create a variable pointing to the wav file that will be played by the user.  main uses a do...while loop to receive input from the user (or a character file) and continues to take in this input until an 'X' is found.  A do...while loop was used to allow for the first input to be received and then evaluated.  Within this loop, a switch statement to call varying functions depending on if the input was a letter signifying a note, a + or - to change the octave, a number to change the notelength, or a . to signify a rest.  This switch statement takes its argument from the return value of determine_change_type, which also uses a switch statement to determine which of the categories an input belongs to, or if the input is invalid.  
For a letter signifying a note to be played, the frequency is found by calling function letters_to_frequency and multiplying by the octavefactor (initialize to 1), then update_waveform is called to ultimately write the information for the note to the wav file.  letters_to_frequency also uses a switch statement, and for each letter, it returns a double giving the corresponding frequency.  update_waveform takes arguments of the waveform array, the maximum volume of the music to be produced, frequency, note length, and a pointer to the wav file.  It first uses a for loop to fill in appropriate values in the array waveform, and then uses wavfile_write to write the array into the file.  Within the for loop, the value for the waveform at each element is determined using the function triangle_waveform, which takes in arguments of frequency, volume, and time and returns a corresponding value.  Each element of waveform is found using the second harmonic of the triangle waveform.
triangle_waveform was similar to the sin function in that it has periodic form.  After subtracting periods from the time until it was within the first wavelength, and if statement was used to determine how to find the value for the waveform element.  The first fourth of the period was a line with a positive slope and y intercept at 0, the middle 2 fourths have the same negative slope and y intercept, and the last fourth has the same slope as the first, but a different y intercept.  Depending on which fourth of the period the time falls, a return value is provided. 
An adjustment of the volume within each note was attempted to be produced by a piecewise function adjust_volume.  However, when called within update_waveform, no sound was produced.  On printing the values of t, unexpected values were found, but I was unable to solve the problem.
For '+' and '-', the octavefactor was either multiplied or divided by two to ensure the change carried over to each following note.  For each appropriate number inputed, the value of notelength was adjusted.
Rests were written using a function insert_rest, which filled the elements of waveform with 0's, then used wavfile_write to include an appropriate rest in the wav file.

The music produced is intended to sound like a xylophone.  The second harmonic adds a high pitch that matches the sound of a xylophone.

The function triangle_waveform was proven to be correct by modifying the program graph.c from lab 4 to show the graph of triangle_waveform (this graph is in the folder).  The harmonics were verified also by modifying graph.c.  adjust_volume was unable to be verified using the input of time, but it was found by detemining slopes and y intercepts for each of the line segements of the piecewise.
