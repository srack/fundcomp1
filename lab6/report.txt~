Samantha Rack
CSE 20211 Lab 6

When the user runs computer.c, he or she is initially shown an 8 by 8 squares starting board for Othello.  The user is asked for his or her first move, which is typed and accepted as the column number, then the row number.  When the user makes a move, the board is updated and reprinted, then the computer player makes a move.  The computer player pauses for one second while making its move.  The computer's move is printed for the user to see, and then the board is again updated and reprinted.  The user is asked for another move, and the game continues until all of the spaces are used.  The user is then given the results consisting of the number of squares by each player and the winner.

From the perspective of the code, the program computer.c uses functions to break down the necessary elements of the game.  In main, the board is initialized to match the starting board, and it is printed to the screen.  The program then implements a while loop to continue the game until all of the squares are used.  Within the while loop, the function get_move is called if the player is X (the user), and the function computer_move is called if the player is O (the computer).  After this function call, the player is switched for the next turn, and the board is checked for game completion with the funciton is_over.  Within get_move, a while loop is used to ask the user for his or her move.  The function scan_f is used to read in the two values, x and y.  If it is a valid move (based on the return of function is_legal), the while loop terminates and the function move is called.  If it is not valid, the user is told it is an invalid move and is asked again for a move.  The function is_legal checks all possible situations for a move the user could make using if statements and referencing the board.  If the move is outside of the scope of the board, if the move is to a square that has already been used, or if it is not adjacent to another X or O, then the function returns 0, signifying that the move is illegal.  When is_legal returns 1, the while loop of get_move is exited, and move is called.  move inserts the player's name (X) into the specified square with the code board[y][x] = player .  The x and y are switched so that the user can type their move using a typical x, y form (across, then down).  The function move then adjusts any squares that may have been affected by the rules of othello.  This portion calls the functions change_squares_diag, change_squares_horiz, and change_squares_vert, which each have for loops with nested if statements and for loops within the if statements.  The for loop goes through all squares in a given line from the new square, changing the opponent's squares to the player's squares when they fall between the new move and another of the player's squares.  This for loop continues until the squares it is checking are outside the scope of the board, until one of the squares is the character '.' (for loop stopped using a break statement), or until it finds another of the player's squares (again using break).  The final exit from the for loop first uses a for loop to follow the same path back to the player's new square, changing each of the squares in between to the player.  Finally, the board is reprinted.  If it is the computer's turn (player O), computer_move is called.  This function first prints "..." seeds the random numbers with respect to time, then enters a while loop where random values between 0 and BOARD_SIZE for x and y are chosen until the move is valid (the while loop again uses the function is_legal).  The program then sleeps for 1 second to allow the user to understand that the computer is making a move.  This function then calls move, which is described above.  
When all squares are filled, is_done returns 1, and the while loop in main is exited.  is_done uses nested for loops to check for the character '.' within in the scope of the board.  If no '.' is found, then the game is over.  
